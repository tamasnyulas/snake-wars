/**
 * Contains the business logic for managing a game, such as creating a game, updating the game state, and handling game events.
 */
import { Inject, Service } from 'typedi';
import Game, { GameInfo, GameSettings } from '@domain/Entity/Game';
import GameServer from '@domain/Service/GameServer';
import GameFactory from '@domain/Service/GameFactory';

@Service()
export default class GameService {
    @Inject()
    private gameServer!: GameServer;
    @Inject()
    private gameFactory!: GameFactory;

    getGameList (): GameInfo[] {
        return Object.keys(this.gameServer.games).map(gameId => ({
            link: '/game/play?gameId=' + gameId, // TODO: the link should be generated by the router
            settings: this.gameServer.games[gameId].settings,
            numOfPlayers: this.gameServer.games[gameId].getPlayerCount(),
        }));
    }

    canCreateGame (): boolean {
        return this.gameServer.canCreateGame();
    }

    parseGameSettings (reqBody: any): GameSettings {
        const settings: GameSettings = {
            speedIncrement: parseFloat(reqBody.speedIncrement),
            columns: parseInt(reqBody.columns),
            rows: parseInt(reqBody.rows),
            numOfPlayers: parseInt(reqBody.numOfPlayers),
            endEarly: reqBody.endEarly ? true : false,
        };

        return settings;
    }

    createGame (settings: GameSettings, emitter: (gameId: string, event: string, params: any) => void): string {
        const game = this.gameFactory.createGame(settings, emitter);
        this.gameServer.registerNewGame(game);

        return game.gameId;
    }

    hasGame (gameId: string): boolean {
        return !!this.gameServer.games[gameId];
    }

    getGame (gameId: string): Game {
        return this.gameServer.games[gameId];
    }

    onDisconnectUser (gameId: string, userId: string): Game | null {
        const game = this.getGame(gameId);

        if (!game) {
            return null;
        }

        console.log('A user is disconnected, checking for remaining users in the game.');

        if (game.hasPlayer(userId)) {
            // remove the player from the game
            game.removePlayer(userId);
            game.endGame();

            console.log('A player left the game.');
        }
        
        if (game.getPlayerCount() < 1) { // TODO: check the connected user count instead of joined player count to allow 
            this.gameServer.deleteGame(gameId);
            console.log('The game room is deleted.');

            return null
        }

        return game;
    }

}